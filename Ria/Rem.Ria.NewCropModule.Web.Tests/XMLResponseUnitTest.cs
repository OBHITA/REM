using System;
using System.IO;
using System.Text;
using System.Xml;
using System.Xml.Serialization;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Rem.Ria.NewCropModule.Web.Client.Update1;

namespace Rem.Ria.NewCropModule.Web.Test
{
    [TestClass]
    public class XMLResponseUnitTest
    {
        /// <summary>
        ///A test for Items
        ///</summary>
        [TestMethod]
        public void ItemsTest ()
        {
            string payload =
                "";

            byte[] encodedDataAsBytes = Convert.FromBase64String ( payload );
            
            string XMLString = Encoding.ASCII.GetString ( encodedDataAsBytes );
            
            var serializer = new XmlSerializer ( typeof ( MedicationDataSet ),"" );

            var result = serializer.Deserialize ( new StringReader ( XMLString ) ) as MedicationDataSet;

            // Added Assert statement to make sure that this test is included in TFS  build tests
            Assert.IsTrue(result != null && result.Items.Count == 9);
        }
    }
}